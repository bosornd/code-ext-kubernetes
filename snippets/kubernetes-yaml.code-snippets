{
    "Kubernetes-Pod": {
		"prefix": "Pod",
		"body": [
			"apiVersion: v1",
			"kind: Pod",
			"metadata:",
			"  name: ${1:name}",
			"  labels:",
			"    app: $1",
			"spec:",
			"  restartPolicy: Always            # Always, OnFailure, Never",
			"  containers:",
			"  - name: $1",
			"    image: ${2:image}",
			"    imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"    ports:",
			"    - containerPort: ${3:port}",
		],
		"description": "Kubernetes Pod"
	},
	"Kubernetes-Command": {
		"prefix": "Command",
		"body": [
			"command:",
			"- /bin/sh",
			"- -c",
			"- ${1:command}",
		],
		"description": "Kubernetes Container Command"
	},
	"Kubernetes-Environment": {
		"prefix": "Environment",
		"body": [
			"env:",
			"- name: ${1:name}",
			"  valueFrom:",
			"    configMapKeyRef:",
			"      name: ${2:config}",
			"      key: ${3:key}",
		],
		"description": "Kubernetes Container Environment"
	},
	"Kubernetes-Resources": {
		"prefix": "Resources",
		"body": [
			"resources:",
			"  requests:",
			"    cpu: 100m",
			"    memory: 100Mi",
			"  limits:",
			"    cpu: 200m",
			"    memory: 1Gi",
		],
		"description": "Kubernetes Container Resources"
	},
	"Kubernetes-Volumes": {
		"prefix": "Volumes",
		"body": [
			"volumes:",
			"- name: ${1:name}",
			"  persistentVolumeClaim:",
			"    claimName: ${2:claimName}",
		],
		"description": "Kubernetes Pod Volumes"
	},
	"Kubernetes-volumeMounts": {
		"prefix": "volumeMounts",
		"body": [
			"volumeMounts:",
			"- name: ${1:name}",
			"  mountPath: ${2:mountPath}",
		],
		"description": "Kubernetes Container Volume Mounts"
	},
	"Kubernetes-emptyDir Volume": {
		"prefix": "emptyDir",
		"body": [
			"emptyDir: {}",
		],
		"description": "Kubernetes emptyDir Volume"
	},
	"Kubernetes-hostPath Volume": {
		"prefix": "hostPath",
		"body": [
			"hostPath:",
			"  path: ${1:path}",
		],
		"description": "Kubernetes hostPath Volume"
	},
	"Kubernetes-gitRepo Volume": {
		"prefix": "gitRepo",
		"body": [
			"gitRepo:",
			"  repository: ${1:repository}",
			"  directory: .",
		],
		"description": "Kubernetes gitRepo Volume"
	},
	"Kubernetes-NFS Volume": {
		"prefix": "nfs",
		"body": [
			"nfs:",
			"  server: ${1:nfs}",
			"  path: /",
			"  readOnly: false",
		],
		"description": "Kubernetes NFS Volume"
	},
	"Kubernetes-readinessProbe": {
		"prefix": "readinessProbe",
		"body": [
			"readinessProbe:",
			"  httpGet:",
			"    path: /ready",
			"    port: 80",
			"  initialDelaySeconds: 5",
			"  periodSeconds: 5",
		],
		"description": "Kubernetes Container readinessProbe"
	},
	"Kubernetes-ConfigMap": {
		"prefix": "ConfigMap",
		"body": [
			"apiVersion: v1",
			"kind: ConfigMap",
			"metadata:",
			"  name: ${1:name}",
			"data:",
			"  ${2:key}: ${3:value}",
		],
		"description": "Kubernetes ConfigMap"
	},
	"Kubernetes-Secret": {
		"prefix": "Secret",
		"body": [
			"apiVersion: v1",
			"kind: Secret",
			"metadata:",
			"  name: ${1:name}",
			"data:",
			"  ${2:key}: ${3:value}",
		],
		"description": "Kubernetes Secret"
	},
	"Kubernetes-Job": {
		"prefix": "Job",
		"body": [
			"apiVersion: batch/v1",
			"kind: Job",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  ttlSecondsAfterFinished: 100",
			"  completions: 1",
			"  parallelism: 1",
			"  template:",
			"    spec:",
			"      restartPolicy: OnFailure         # Always, OnFailure, Never",
			"      containers:",
			"      - name: $1",
			"        image: ${2:image}",
			"        imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"        command:",
			"        - /bin/sh",
			"        - -c",
			"        - ${3:command}",
		],
		"description": "Kubernetes Job"
	},
	"Kubernetes-CronJob": {
		"prefix": "CronJob",
		"body": [
			"apiVersion: batch/v1",
			"kind: CronJob",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  schedule: "${2:* * * * *}"",
			"  jobTemplate:",
			"    spec:",
			"      ttlSecondsAfterFinished: 100",
			"      completions: 1",
			"      parallelism: 1",
			"      template:",
			"        spec:",
			"          restartPolicy: OnFailure         # Always, OnFailure, Never",
			"          containers:",
			"          - name: $1",
			"            image: ${3:image}",
			"            imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"            command:",
			"            - /bin/sh",
			"            - -c",
			"            - ${4:command}",
		],
		"description": "Kubernetes CronJob"
	},
	"Kubernetes-DaemonSet": {
		"prefix": "DaemonSet",
		"body": [
			"apiVersion: apps/v1",
			"kind: DaemonSet",
			"metadata:",
			"  name: ${1:name}",
			"  labels:",
			"    app: $1",
			"spec:",
			"  selector:",
			"    matchLabels:",
			"      app: $1",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: $1",
			"    spec:",
			"      restartPolicy: Always            # Always, OnFailure, Never",
			"      containers:",
			"      - name: $1",
			"        image: ${2:image}",
			"        imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
		],
		"description": "Kubernetes DaemonSet"
	},
	"Kubernetes-Deployment": {
		"prefix": "Deployment",
		"body": [
			"apiVersion: apps/v1",
			"kind: Deployment",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  replicas: 1",
			"  selector:",
			"    matchLabels:",
			"      app: $1",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: $1",
			"    spec:",
			"      restartPolicy: Always            # Always, OnFailure, Never",
			"      containers:",
			"      - name: $1",
			"        image: ${2:image}",
			"        imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"        ports:",
			"        - containerPort: ${3:port}",
			
		],
		"description": "Kubernetes Deployment"
	},
	"Kubernetes-HorizontalPodAutoscaler": {
		"prefix": "HorizontalPodAutoscaler",
		"body": [
			"apiVersion: autoscaling/v2",
			"kind: HorizontalPodAutoscaler",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  scaleTargetRef:",
			"    apiVersion: apps/v1",
			"    kind: Deployment",
			"    name: $1",
			"  minReplicas: 1",
			"  maxReplicas: 10",
			"  metrics:",
			"  - type: Resource",
			"    resource:",
			"      name: cpu",
			"      target:",
			"        type: Utilization",
			"        averageUtilization: 50",
		],
		"description": "Kubernetes HorizontalPodAutoscaler"
	},
	"Kubernetes-Ingress": {
		"prefix": "Ingress",
		"body": [
			"apiVersion: networking.k8s.io/v1",
			"kind: Ingress",
			"metadata:",
			"  name: ${1:name}",
			"  annotations:",
			"    nginx.ingress.kubernetes.io/rewrite-target: /",
			"    nginx.ingress.kubernetes.io/ssl-redirect: false",
			"spec:",
			"  rules:",
			"  - http:",
			"      paths:",
			"      - path: ${2:/}",
			"        pathType: Prefix",
			"        backend:",
			"          service:",
			"            name: ${3:service}",
			"            port:",
			"              number: ${4:port}",
		],
		"description": "Kubernetes Ingress"
	},
	"Kubernetes-TLS": {
		"prefix": "TLS",
		"body": [
			"tls:",
			"- hosts:",
			"  - ${1:host}",
			"  secretName: ${2:$1-tls}",
		],
		"description": "Kubernetes Ingress - TLS"
	},
	"Kubernetes-Namespace": {
		"prefix": "Namespace",
		"body": [
			"apiVersion: v1",
			"kind: Namespace",
			"metadata:",
			"  name: ${1:name}",
		],
		"description": "Kubernetes Namespace"
	},
	"Kubernetes-PersistentVolumeClaim": {
		"prefix": "PersistentVolumeClaim",
		"body": [
			"apiVersion: v1",
			"kind: PersistentVolumeClaim",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  resources:",
			"    requests:",
			"      storage: ${2:1Gi}",
			"  accessModes:",
			"  - ${3:ReadWriteMany}                  # ReadWriteOnce, ReadWriteMany, ReadOnlyMany, ReadWriteOncePod",
		],
		"description": "Kubernetes PersistentVolumeClaim"
	},
	"Kubernetes-ReplicaSet": {
		"prefix": "ReplicaSet",
		"body": [
			"apiVersion: apps/v1",
			"kind: ReplicaSet",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  replicas: 1",
			"  selector:",
			"    matchLabels:",
			"      app: $1",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: $1",
			"    spec:",
			"      restartPolicy: Always            # Always, OnFailure, Never",
			"      containers:",
			"      - name: $1",
			"        image: ${2:image}",
			"        imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"        ports:",
			"        - containerPort: ${3:port}",
			
		],
		"description": "Kubernetes ReplicaSet"
	},
	"Kubernetes-ReplicationController": {
		"prefix": "ReplicationController",
		"body": [
			"apiVersion: apps/v1",
			"kind: ReplicationController",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  replicas: 1",
			"  selector:",
			"    app: $1",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: $1",
			"    spec:",
			"      restartPolicy: Always            # Always, OnFailure, Never",
			"      containers:",
			"      - name: $1",
			"        image: ${2:image}",
			"        imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"        ports:",
			"        - containerPort: ${3:port}",
		],
		"description": "Kubernetes ReplicationController"
	},
	"Kubernetes-Role": {
		"prefix": "Role",
		"body": [
			"apiVersion: rbac.authorization.k8s.io/v1",
			"kind: Role",
			"metadata:",
			"  name: ${1:name}",
			"rules:",
			"- apiGroups: []",
			"  resources: [pods]",
			"  verbs: [get, list, watch]",
		],
		"description": "Kubernetes Role"
	},
	"Kubernetes-RoleBinding": {
		"prefix": "RoleBinding",
		"body": [
			"apiVersion: rbac.authorization.k8s.io/v1",
			"kind: RoleBinding",
			"metadata:",
			"  name: ${1:name}",
			"subjects:",
			"- kind: User",
			"  name: ${2:user}",
			"  apiGroup: rbac.authorization.k8s.io",
			"roleRef:",
			"  kind: Role",
			"  name: ${3:role}",
			"  apiGroup: rbac.authorization.k8s.io",
		],
		"description": "Kubernetes RoleBinding"
	},
	"Kubernetes-Service": {
		"prefix": "Service",
		"body": [
			"apiVersion: v1",
			"kind: Service",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  selector:",
			"    app: $1",
			"  type: ClusterIP                      # ClusterIP, NodePort, LoadBalancer, ExternalName",
			"  #  sessionAffinity: ClientIP",
			"  ports:",
			"  - port: ${2:port}",
			"    targetPort: ${3:targetPort}",
		],
		"description": "Kubernetes Service"
	},
	"Kubernetes-ServiceAccount": {
		"prefix": "ServiceAccount",
		"body": [
			"apiVersion: v1",
			"kind: ServiceAccount",
			"metadata:",
			"  name: ${1:name}",
		],
		"description": "Kubernetes ServiceAccount"
	},
	"Kubernetes-StatefulSet": {
		"prefix": "StatefulSet",
		"body": [
			"apiVersion: apps/v1",
			"kind: StatefulSet",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  replicas: 1",
			"  serviceName: $1",
			"  selector:",
			"    matchLabels:",
			"      app: $1",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: $1",
			"    spec:",
			"      restartPolicy: Always            # Always, OnFailure, Never",
			"      containers:",
			"      - name: $1",
			"        image: ${2:image}",
			"        imagePullPolicy: IfNotPresent  # Always, IfNotPresent, Never",
			"        ports:",
			"        - containerPort: ${3:port}",
			"        VolumeMounts:",
			"        - name: ${4:data}",
			"          mountPath: ${5:/data}",
			"  VolumeClaimTemplates:",
			"  - metadata:",
			"      name: $4",
			"    spec:",
			"      accessModes:",
			"      - ReadWriteMany                  # ReadWriteOnce, ReadWriteMany, ReadOnlyMany, ReadWriteOncePod",
			"      resources:",
			"        requests:",
			"          storage: 1Gi",
			
		],
		"description": "Kubernetes StatefulSet"
	},
	"Kubernetes-RabbitmqCluster": {
		"prefix": "RabbitmqCluster",
		"body": [
			"apiVersion: rabbitmq.com/v1beta1",
			"kind: RabbitmqCluster",
			"metadata:",
			"  name: ${1:name}",
			"spec:",
			"  replicas: 1",
			"  persistence:",
			"    storage: 1Mi",
			"  resources:",
			"    requests:",
			"      cpu: 100m",
			"      memory: 100Mi",
			"    limits:",
			"      cpu: 200m",
			"      memory: 1Gi",
			"  rabbitmq:",
			"    envConfig: |",
			"      RABBITMQ_DEFAULT_USER=${2:username}",
			"      RABBITMQ_DEFAULT_PASS=${3:password}",
		],
		"description": "Kubernetes RabbitmqCluster"
	},
}
